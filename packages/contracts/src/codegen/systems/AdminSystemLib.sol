// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { AdminSystem } from "../../AdminSystem.sol";
import { BlueprintChunkData } from "../../BlueprintLib.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type AdminSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "eth_monument", name: "AdminSystem" }))
AdminSystemType constant adminSystem = AdminSystemType.wrap(
  0x73796574685f6d6f6e756d656e74000041646d696e53797374656d0000000000
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title AdminSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library AdminSystemLib {
  error AdminSystemLib_CallingFromRootSystem();

  function setAdmin(AdminSystemType self, address admin) internal {
    return CallWrapper(self.toResourceId(), address(0)).setAdmin(admin);
  }

  function setBlueprintChunks(AdminSystemType self, BlueprintChunkData[] memory chunks) internal {
    return CallWrapper(self.toResourceId(), address(0)).setBlueprintChunks(chunks);
  }

  function setAdmin(CallWrapper memory self, address admin) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AdminSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_setAdmin_address.setAdmin, (admin));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setBlueprintChunks(CallWrapper memory self, BlueprintChunkData[] memory chunks) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert AdminSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_setBlueprintChunks_BlueprintChunkDataArray.setBlueprintChunks, (chunks));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function setAdmin(RootCallWrapper memory self, address admin) internal {
    bytes memory systemCall = abi.encodeCall(_setAdmin_address.setAdmin, (admin));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function setBlueprintChunks(RootCallWrapper memory self, BlueprintChunkData[] memory chunks) internal {
    bytes memory systemCall = abi.encodeCall(_setBlueprintChunks_BlueprintChunkDataArray.setBlueprintChunks, (chunks));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(AdminSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(AdminSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(AdminSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(AdminSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(AdminSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (AdminSystemType) {
    return AdminSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(AdminSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _setAdmin_address {
  function setAdmin(address admin) external;
}

interface _setBlueprintChunks_BlueprintChunkDataArray {
  function setBlueprintChunks(BlueprintChunkData[] memory chunks) external;
}

using AdminSystemLib for AdminSystemType global;
using AdminSystemLib for CallWrapper global;
using AdminSystemLib for RootCallWrapper global;
