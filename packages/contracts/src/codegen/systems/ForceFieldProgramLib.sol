// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { ForceFieldProgram } from "../../ForceFieldProgram.sol";
import { ValidateProgramContext, AttachProgramContext, DetachProgramContext, FuelContext, HitContext, AddFragmentContext, RemoveFragmentContext, BuildContext, MineContext } from "@dust/world/src/ProgramHooks.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type ForceFieldProgramType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "eth-monument", name: "ForceFieldProgra" }))
ForceFieldProgramType constant forceFieldProgram = ForceFieldProgramType.wrap(
  0x73796574682d6d6f6e756d656e740000466f7263654669656c6450726f677261
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title ForceFieldProgramLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library ForceFieldProgramLib {
  error ForceFieldProgramLib_CallingFromRootSystem();

  function validateProgram(ForceFieldProgramType self, ValidateProgramContext memory ctx) internal view {
    return CallWrapper(self.toResourceId(), address(0)).validateProgram(ctx);
  }

  function onAttachProgram(ForceFieldProgramType self, AttachProgramContext memory ctx) internal {
    return CallWrapper(self.toResourceId(), address(0)).onAttachProgram(ctx);
  }

  function onDetachProgram(ForceFieldProgramType self, DetachProgramContext memory ctx) internal {
    return CallWrapper(self.toResourceId(), address(0)).onDetachProgram(ctx);
  }

  function onFuel(ForceFieldProgramType self, FuelContext memory ctx) internal {
    return CallWrapper(self.toResourceId(), address(0)).onFuel(ctx);
  }

  function onHit(ForceFieldProgramType self, HitContext memory ctx) internal {
    return CallWrapper(self.toResourceId(), address(0)).onHit(ctx);
  }

  function onAddFragment(ForceFieldProgramType self, AddFragmentContext memory ctx) internal view {
    return CallWrapper(self.toResourceId(), address(0)).onAddFragment(ctx);
  }

  function onRemoveFragment(ForceFieldProgramType self, RemoveFragmentContext memory ctx) internal view {
    return CallWrapper(self.toResourceId(), address(0)).onRemoveFragment(ctx);
  }

  function onBuild(ForceFieldProgramType self, BuildContext memory ctx) internal {
    return CallWrapper(self.toResourceId(), address(0)).onBuild(ctx);
  }

  function onMine(ForceFieldProgramType self, MineContext memory ctx) internal {
    return CallWrapper(self.toResourceId(), address(0)).onMine(ctx);
  }

  function _msgSender(ForceFieldProgramType self) internal view returns (address) {
    return CallWrapper(self.toResourceId(), address(0))._msgSender();
  }

  function _msgValue(ForceFieldProgramType self) internal view returns (uint256) {
    return CallWrapper(self.toResourceId(), address(0))._msgValue();
  }

  function validateProgram(CallWrapper memory self, ValidateProgramContext memory ctx) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_validateProgram_ValidateProgramContext.validateProgram, (ctx));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function onAttachProgram(CallWrapper memory self, AttachProgramContext memory ctx) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onAttachProgram_AttachProgramContext.onAttachProgram, (ctx));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function onDetachProgram(CallWrapper memory self, DetachProgramContext memory ctx) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onDetachProgram_DetachProgramContext.onDetachProgram, (ctx));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function onFuel(CallWrapper memory self, FuelContext memory ctx) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onFuel_FuelContext.onFuel, (ctx));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function onHit(CallWrapper memory self, HitContext memory ctx) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onHit_HitContext.onHit, (ctx));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function onAddFragment(CallWrapper memory self, AddFragmentContext memory ctx) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onAddFragment_AddFragmentContext.onAddFragment, (ctx));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function onRemoveFragment(CallWrapper memory self, RemoveFragmentContext memory ctx) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onRemoveFragment_RemoveFragmentContext.onRemoveFragment, (ctx));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function onBuild(CallWrapper memory self, BuildContext memory ctx) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onBuild_BuildContext.onBuild, (ctx));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function onMine(CallWrapper memory self, MineContext memory ctx) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onMine_MineContext.onMine, (ctx));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function _msgSender(CallWrapper memory self) internal view returns (address) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(__msgSender._msgSender, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (address));
  }

  function _msgValue(CallWrapper memory self) internal view returns (uint256) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert ForceFieldProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(__msgValue._msgValue, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    return abi.decode(result, (uint256));
  }

  function validateProgram(RootCallWrapper memory self, ValidateProgramContext memory ctx) internal view {
    bytes memory systemCall = abi.encodeCall(_validateProgram_ValidateProgramContext.validateProgram, (ctx));
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function onAttachProgram(RootCallWrapper memory self, AttachProgramContext memory ctx) internal {
    bytes memory systemCall = abi.encodeCall(_onAttachProgram_AttachProgramContext.onAttachProgram, (ctx));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function onDetachProgram(RootCallWrapper memory self, DetachProgramContext memory ctx) internal {
    bytes memory systemCall = abi.encodeCall(_onDetachProgram_DetachProgramContext.onDetachProgram, (ctx));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function onFuel(RootCallWrapper memory self, FuelContext memory ctx) internal {
    bytes memory systemCall = abi.encodeCall(_onFuel_FuelContext.onFuel, (ctx));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function onHit(RootCallWrapper memory self, HitContext memory ctx) internal {
    bytes memory systemCall = abi.encodeCall(_onHit_HitContext.onHit, (ctx));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function onAddFragment(RootCallWrapper memory self, AddFragmentContext memory ctx) internal view {
    bytes memory systemCall = abi.encodeCall(_onAddFragment_AddFragmentContext.onAddFragment, (ctx));
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function onRemoveFragment(RootCallWrapper memory self, RemoveFragmentContext memory ctx) internal view {
    bytes memory systemCall = abi.encodeCall(_onRemoveFragment_RemoveFragmentContext.onRemoveFragment, (ctx));
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function onBuild(RootCallWrapper memory self, BuildContext memory ctx) internal {
    bytes memory systemCall = abi.encodeCall(_onBuild_BuildContext.onBuild, (ctx));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function onMine(RootCallWrapper memory self, MineContext memory ctx) internal {
    bytes memory systemCall = abi.encodeCall(_onMine_MineContext.onMine, (ctx));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function _msgSender(RootCallWrapper memory self) internal view returns (address) {
    bytes memory systemCall = abi.encodeCall(__msgSender._msgSender, ());

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (address));
  }

  function _msgValue(RootCallWrapper memory self) internal view returns (uint256) {
    bytes memory systemCall = abi.encodeCall(__msgValue._msgValue, ());

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    return abi.decode(result, (uint256));
  }

  function callFrom(ForceFieldProgramType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(ForceFieldProgramType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(ForceFieldProgramType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(ForceFieldProgramType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(ForceFieldProgramType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (ForceFieldProgramType) {
    return ForceFieldProgramType.wrap(resourceId.unwrap());
  }

  function getAddress(ForceFieldProgramType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _validateProgram_ValidateProgramContext {
  function validateProgram(ValidateProgramContext memory ctx) external;
}

interface _onAttachProgram_AttachProgramContext {
  function onAttachProgram(AttachProgramContext memory ctx) external;
}

interface _onDetachProgram_DetachProgramContext {
  function onDetachProgram(DetachProgramContext memory ctx) external;
}

interface _onFuel_FuelContext {
  function onFuel(FuelContext memory ctx) external;
}

interface _onHit_HitContext {
  function onHit(HitContext memory ctx) external;
}

interface _onAddFragment_AddFragmentContext {
  function onAddFragment(AddFragmentContext memory ctx) external;
}

interface _onRemoveFragment_RemoveFragmentContext {
  function onRemoveFragment(RemoveFragmentContext memory ctx) external;
}

interface _onBuild_BuildContext {
  function onBuild(BuildContext memory ctx) external;
}

interface _onMine_MineContext {
  function onMine(MineContext memory ctx) external;
}

interface __msgSender {
  function _msgSender() external;
}

interface __msgValue {
  function _msgValue() external;
}

using ForceFieldProgramLib for ForceFieldProgramType global;
using ForceFieldProgramLib for CallWrapper global;
using ForceFieldProgramLib for RootCallWrapper global;
