// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { SpawnTileProgram } from "../../SpawnTileProgram.sol";
import { HookContext, ISpawn } from "@dust/world/src/ProgramHooks.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type SpawnTileProgramType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "eth_monument", name: "SpawnTileProgram" }))
SpawnTileProgramType constant spawnTileProgram = SpawnTileProgramType.wrap(
  0x73796574685f6d6f6e756d656e740000537061776e54696c6550726f6772616d
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title SpawnTileProgramLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library SpawnTileProgramLib {
  error SpawnTileProgramLib_CallingFromRootSystem();

  function onAttachProgram(SpawnTileProgramType self, HookContext memory ctx) internal view {
    return CallWrapper(self.toResourceId(), address(0)).onAttachProgram(ctx);
  }

  function onDetachProgram(SpawnTileProgramType self, HookContext memory ctx) internal view {
    return CallWrapper(self.toResourceId(), address(0)).onDetachProgram(ctx);
  }

  function onSpawn(SpawnTileProgramType self, HookContext memory ctx, ISpawn.SpawnData memory spawn) internal {
    return CallWrapper(self.toResourceId(), address(0)).onSpawn(ctx, spawn);
  }

  function _msgSender(SpawnTileProgramType self) internal view returns (address __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0))._msgSender();
  }

  function _msgValue(SpawnTileProgramType self) internal view returns (uint256 __auxRet0) {
    return CallWrapper(self.toResourceId(), address(0))._msgValue();
  }

  function onAttachProgram(CallWrapper memory self, HookContext memory ctx) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SpawnTileProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onAttachProgram_HookContext.onAttachProgram, (ctx));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function onDetachProgram(CallWrapper memory self, HookContext memory ctx) internal view {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SpawnTileProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onDetachProgram_HookContext.onDetachProgram, (ctx));
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);
    abi.decode(returnData, (bytes));
  }

  function onSpawn(CallWrapper memory self, HookContext memory ctx, ISpawn.SpawnData memory spawn) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SpawnTileProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_onSpawn_HookContext_ISpawn_SpawnData.onSpawn, (ctx, spawn));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function _msgSender(CallWrapper memory self) internal view returns (address __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SpawnTileProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(__msgSender._msgSender, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (address));
    }
  }

  function _msgValue(CallWrapper memory self) internal view returns (uint256 __auxRet0) {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert SpawnTileProgramLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(__msgValue._msgValue, ());
    bytes memory worldCall = self.from == address(0)
      ? abi.encodeCall(IWorldCall.call, (self.systemId, systemCall))
      : abi.encodeCall(IWorldCall.callFrom, (self.from, self.systemId, systemCall));
    (bool success, bytes memory returnData) = address(_world()).staticcall(worldCall);
    if (!success) revertWithBytes(returnData);

    bytes memory result = abi.decode(returnData, (bytes));
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (uint256));
    }
  }

  function onAttachProgram(RootCallWrapper memory self, HookContext memory ctx) internal view {
    bytes memory systemCall = abi.encodeCall(_onAttachProgram_HookContext.onAttachProgram, (ctx));
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function onDetachProgram(RootCallWrapper memory self, HookContext memory ctx) internal view {
    bytes memory systemCall = abi.encodeCall(_onDetachProgram_HookContext.onDetachProgram, (ctx));
    SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
  }

  function onSpawn(RootCallWrapper memory self, HookContext memory ctx, ISpawn.SpawnData memory spawn) internal {
    bytes memory systemCall = abi.encodeCall(_onSpawn_HookContext_ISpawn_SpawnData.onSpawn, (ctx, spawn));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function _msgSender(RootCallWrapper memory self) internal view returns (address __auxRet0) {
    bytes memory systemCall = abi.encodeCall(__msgSender._msgSender, ());

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (address));
    }
  }

  function _msgValue(RootCallWrapper memory self) internal view returns (uint256 __auxRet0) {
    bytes memory systemCall = abi.encodeCall(__msgValue._msgValue, ());

    bytes memory result = SystemCall.staticcallOrRevert(self.from, self.systemId, systemCall);
    // skip decoding an empty result, which can happen after expectRevert
    if (result.length != 0) {
      return abi.decode(result, (uint256));
    }
  }

  function callFrom(SpawnTileProgramType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(SpawnTileProgramType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(SpawnTileProgramType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(SpawnTileProgramType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(SpawnTileProgramType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (SpawnTileProgramType) {
    return SpawnTileProgramType.wrap(resourceId.unwrap());
  }

  function getAddress(SpawnTileProgramType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _onAttachProgram_HookContext {
  function onAttachProgram(HookContext memory ctx) external;
}

interface _onDetachProgram_HookContext {
  function onDetachProgram(HookContext memory ctx) external;
}

interface _onSpawn_HookContext_ISpawn_SpawnData {
  function onSpawn(HookContext memory ctx, ISpawn.SpawnData memory spawn) external;
}

interface __msgSender {
  function _msgSender() external;
}

interface __msgValue {
  function _msgValue() external;
}

using SpawnTileProgramLib for SpawnTileProgramType global;
using SpawnTileProgramLib for CallWrapper global;
using SpawnTileProgramLib for RootCallWrapper global;
